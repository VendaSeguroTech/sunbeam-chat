/**
 * Script de teste para a API de valida√ß√£o SSO
 *
 * Como usar:
 * 1. Inicie a API: npm start
 * 2. Em outro terminal: node test-api.js
 * 3. Para testar com token real: node test-api.js "SEU_TOKEN_AQUI"
 */

const http = require('http');

// Token de teste (ser√° inv√°lido, mas testar√° a API)
const TEST_TOKEN = process.argv[2] || 'token_de_teste_invalido';

console.log('\nüß™ Testando API de Valida√ß√£o SSO\n');
console.log('================================\n');
console.log('üìç URL:', 'http://localhost:3001');
console.log('üîë Token:', TEST_TOKEN.substring(0, 30) + '...');
console.log('\n================================\n');

const postData = JSON.stringify({
  token: TEST_TOKEN,
});

const options = {
  hostname: 'localhost',
  port: 3001,
  path: '/',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(postData),
  },
};

console.log('‚è≥ Enviando requisi√ß√£o...\n');

const req = http.request(options, (res) => {
  let data = '';

  console.log('üìä Status Code:', res.statusCode);
  console.log('üìã Headers:', JSON.stringify(res.headers, null, 2));
  console.log('\n');

  res.on('data', (chunk) => {
    data += chunk;
  });

  res.on('end', () => {
    console.log('üì¶ Resposta da API:\n');

    try {
      const jsonData = JSON.parse(data);
      console.log(JSON.stringify(jsonData, null, 2));

      console.log('\n================================\n');

      if (res.statusCode === 200 && jsonData.success) {
        console.log('‚úÖ SUCESSO! API funcionando corretamente.');
        console.log('üë§ Usu√°rio:', jsonData.user.email);
        console.log('üîó Session URL gerada:', jsonData.session_url ? 'Sim' : 'N√£o');
      } else if (res.statusCode === 401) {
        console.log('‚ö†Ô∏è  Token inv√°lido (esperado para token de teste)');
        console.log('üí° API est√° funcionando! Use um token real do Hub para testar autentica√ß√£o completa.');
      } else if (res.statusCode === 400) {
        console.log('‚ö†Ô∏è  Requisi√ß√£o inv√°lida');
        console.log('‚ùå Erro:', jsonData.error);
      } else if (res.statusCode === 500) {
        console.log('‚ùå ERRO NO SERVIDOR');
        console.log('üîç Verifique os logs da API para mais detalhes');
        console.log('üí° Poss√≠veis causas:');
        console.log('   - Credenciais do Supabase incorretas');
        console.log('   - Service key sem permiss√µes');
        console.log('   - Problemas de conex√£o com Supabase');
      } else {
        console.log('‚ö†Ô∏è  Status inesperado:', res.statusCode);
      }

    } catch (error) {
      console.log('‚ùå ERRO ao parsear resposta JSON:');
      console.log(data);
    }

    console.log('\n================================\n');
  });
});

req.on('error', (error) => {
  console.log('\n================================\n');
  console.log('‚ùå ERRO DE CONEX√ÉO\n');
  console.error(error.message);
  console.log('\nüí° Verifique se:');
  console.log('   1. A API est√° rodando (npm start)');
  console.log('   2. A porta 3001 est√° dispon√≠vel');
  console.log('   3. N√£o h√° firewall bloqueando');
  console.log('\n================================\n');
});

req.write(postData);
req.end();
